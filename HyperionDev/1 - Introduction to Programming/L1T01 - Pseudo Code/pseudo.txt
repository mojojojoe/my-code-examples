P1.
1) variables needed:
  i the input number a positive integer
  max the biggest number a positive integer
  
2) flow:
   1.max = 0
   2.let i = input("enter a positive number")
   3.while i is positive:
   	   a.  if i is bigger than max:
	   b.      let max be i
   	   c.  input a new i and
   	   d.    check whether it is negative,
   	   e.      in which case you should ask the user to try again
   4.return max
   
3) complexity:

   1.O(1)
   2.O(1)
   3.O(5) n times
    .a.O(1)
    .b.O(1)
    .c.O(1)
    .d.O(1)
    .e.O(1)
       
i.e. 1,2, and 3 are O(1) + O(1) + n * [O(1)+O(1)+O(1)+O(1)+O(1)] = O(2)+O(5n) == O(n)

Therefore O(2) + O(5n) = O(n)
By my reasoning the algorithm is O(n) where n is the number of times a number is input.

P2.
request the user name and assign it to /first_name/
print first_name with "Hello World"

P3.
for a set of integers,
  take each and subtotal it and then discard it, keeping just the subtotl and  record (a count) that this was done
when finished:
  Return The Subtotal Divided By The Count.

P4.
take a grocery list made of the list and a second column marking whether the item has been bought yet:
     let to_buy be a new list where from the old list(without the second column), those items yet to buy are selected. discard the old list.
     sort to_buy alphabetically in place
     return to_buy

P5.
read X and Y from input

let S = X + Y
let A = S/2
let P = X * Y

printout S, A, and P
